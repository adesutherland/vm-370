This update implements support for the CMS multilevel stack
facility with the commands: MAKEBUF, DROPBUF, and SENTRIES.
These commands enable REXX programs to partition off a segment
of CMS stack space for their own use. The stack space segemnt
can be easily removed during REXX program termination so
that the stacked information belonging to a caller was
restored the the state expected by that caller. This cleanup
facilitated successful error recovery for REXX programs.

The syntax and usage description of these commands can
be found in any set of VM manuals starting with VM/SP.

Updates for macro files:

NUCON    HRC406DS  - Adds control block anchors for the
                     current state of the program stack

Updates for assemble files:

DMSBUF   HRC406DS - dummy update to add new assemble file

DMSCAT   HRC406DS - changes the ATTN function to use the multi-level
                    stack control block structure when stacking lines.
                    ATTN is used by REXX queue and push operations.

DMSCIT   HRC406DS - changes the virtual console interrupt processor to
                    use the new stack control block structure to stack
                    incoming data from the console. Modifies the DESBUF
                    command to issue a DROPBUF 0 to clear out all
                    stacked messages.

DMSCRD   HRC406DS - satisfy a console read with stacked data from the
                    new stack control block structure

DMSEXT   HRC406DS - supply the count of stacked lines to the &READFLAG
                    variable in the original EXEC language processor

DMSFNC   HRC406DS - Adds the MAKEBUF, DROPBUF, and SENTRIES
                    commands to the table of in memory commands

DMSNUC   HRC406DS - Forces re-assembly to pick up changes in the NUCON MACRO file.

New assembler source:

DMSBUF   ASSEMBLE  - implements the MAKEBUF, DROPBUF, and SENTRIES commands


Steps to apply:

1. Add the line below, as the top line in the top level AUX file for
   the changed files listed above: (In an unmodified Sixpack, the
   top level AUX file has filetype AUXHRC.)

HRC406DS V01 Support for MAKEBUF, DROPBUF, and SENTRIES

2. Rebuild the top level CMS service MACLIB. (In an unmodified
   Sixpack, the macro library control file is DMSMHRC CNTRL.)

   VMFMAC CMSHRC DMSMHRC

3. Recompile all new or updated assembler files. (In an unmodified
   Sixpack, the assembler source control file is DMSHRC CNTRL.)

   VMFASM DMSBUF DMSHRC
   VMFASM DMSCAT DMSHRC
   VMFASM DMSCIT DMSHRC
   VMFASM DMSCRD DMSHRC
   VMFASM DMSEXT DMSHRC
   VMFASM DMSFNC DMSHRC
   VMFASM DMSNUC DMSHRC

4. Build the classic EXEC processor MODULE file.

   EXEC CMSGEND DMSEXT

5. Update the CMSLOAD EXEC file. This file names all the parts to be
   included in the CMS Nucleus. EDIT the CMSLOAD EXEC file and
   insert lines to include new file DMSBUF TEXT.
*
   Insert a line for new routine DMSBUF just after
   the existing line naming DMSTIO. That part of the
   CMSLOAD EXEC file will now look like this:

&1 &2 &3 DMSZNR
&1 &2 &3 DMSTIO
&1 &2 &3 DMSBUF   <------ Add this line here
&1 &2 &3 DMSCSF
&1 &2 &3 DMSZIT

6. Rebuild the CMS nucleus using VMFLOAD with the
   CMSLOAD EXEC build list, and IPL the nucleus
   punch file to write the CMS nucleus on the disk.

   spool punch *                       <-- send the CMS nucleus card image file
                                              to the spool input queue
   Ready; T=0.01/0.01 03:30:29

   vmfload cmsload dmshrc              <--create the CMS nucleus card image file
   SYSTEM LOAD DECK COMPLETE
   PUN FILE 0709  TO  MAINT    COPY 01 NOHOLD  <--- '709' is the spool file number
   Ready; T=0.12/0.36 03:30:47                       for the CMS Nucleus card deck

   order rdr 709                       <--place the specific spool file at thetop of
   0001 FILE  ORDERED                   queue of spool files to read
   Ready; T=0.01/0.01 03:30:54

   ipl 00C clear                       <--perform an Initial Program Load for the
                                          CMS Nucleus card file and answer theprompts.
   DMSINI606R SYSTEM DISK ADDRESS =
   190
   DMSINI615R Y-DISK ADDRESS =
   19e
   DMSINI607R REWRITE THE NUCLEUS ?
   yes
   DMSINI608R IPL DEVICE ADDRESS =
   190
   DMSINI609R NUCLEUS CYL ADDRESS =
   59
   DMSINI610R ALSO IPL CYLINDER 0 ?
   yes
   DMSINI611R VERSION IDENTIFICATION =
   vm/370 Sixpack Test System          <-- set an up to 32 character msg shownwhen CMS is loaded by IPL
   DMSINI612R INSTALLATION HEADING =
   Conversional Monitor System         <-- set an up to 64 character msg placed on PRINT command output
   VM/370 SIXPACK TEST SYSTEM

   Y (19E) R/O

   +-----------------------------------------------------------------------------+
   |          Welcome to VM/370 and VM/380 "SixPack" version 1.3!  |
   +-----------------------------------------------------------------------------+

   Ready; T=0.01/0.05 03:32:26

   spool printer * close                                   <-- save the CMS LOADMAP
   PRT FILE 0711  TO  MAINT    COPY 01 NOHOLD                  to disk by ORDERing it to
   Ready; T=0.01/0.01 03:32:38                                 the front of the reader queue
                                                               and issuing 'READ CMSLOAD MAP'

7. Copy new MODULE files to the CMS System Disk.

   ACCESS 190 B                                 <--- where B is any free mode letter.
   COPY DMSEXT  MODULE A2 = = B2 ( OLDDATE REP  <--- Be sure to specify mode number 2
   RELEASE B

8. Resave the CMS saved segment.

   ipl 190 clear
   VM/370 SIXPACK TEST SYSTEM
   savesys cms                         <-- Must be the first command after IPL
   SYSTEM SAVED
   VM/370 SIXPACK TEST SYSTEM

   Y (19E) R/O

   +-----------------------------------------------------------------------------+
   |          Welcome to VM/370 and VM/380 "SixPack" version 1.3!  |
   +-----------------------------------------------------------------------------+
   Ready; T=0.01/0.04 03:33:02

DMSSNX   CSECT                                                          00010000
*.                                                                      00020000
*  Module name -                                                        00030000
*                                                                       00040000
*         DMSSNX                                                        00050000
*                                                                       00060000
*  Function -                                                           00070000
*                                                                       00080000
*         Support subcommands and nucleus extensions in VM/370          00090000
*                                                                       00100000
*  Attributes -                                                         00110000
*                                                                       00120000
*                                                                       00130000
*         Nucleus resident, Re-Entrant                                  00140000
*                                                                       00150000
*  Entry points -                                                       00160000
*                                                                       00170000
*        DMSSNXSB - SUBCOM handling                                     00180000
*        DMSSNXNU - NUCEXT handling                                     00190000
*                                                                       00200000
*  Entry conditions-                                                    00210000
*                                                                       00220000
*        For SUBCOM                                                     00230000
*                                                                       00240000
*         R1 points to a plist:                                         00250000
*                                                                       00260000
*         1) Create an environment                                      00270000
*            DC  CL8'SUBCOM'                                            00280000
*            DC  CL8'environment name'                                  00290000
*            DC  4X'00'                 System Mask, Key, etc           00300000
*            DC  AL4(entry point)       Environment address             00310000
*            DC  CL4'user information'  to be put in SCBWKWRD           00320000
*            DC  8X'FF'                                                 00330000
*                                                                       00340000
*         2) Query the existence of an environment                      00350000
*            DC  CL8'SUBCOM'                                            00360000
*            DC  CL8'environment name'                                  00370000
*            DC  4X'00'                 SCBLOCK ptr set here            00380000
*            DC  4X'FF'                                                 00390000
*                                                                       00400000
*         3) Query the chain anchor                                     00410000
*            DC  CL8'SUBCOM'                                            00420000
*            DS  CL8              (ignored)                             00430000
*            DS  AL4              Receives chain anchor                 00440000
*                                   contents from NUCSCBLK.             00450000
*            DC  AL4(1)           Indicates request for anchor          00460000
*                                                                       00470000
*         4) Release an environment                                     00480000
*            DC  CL8'SUBCOM'                                            00490000
*            DC  CL8'environment name'                                  00500000
*            DC  4X'00'                 reserved                        00510000
*            DC  AL4(0)                                                 00520000
*            DC  8X'ff'                                                 00530000
*                                                                       00540000
*   x     5) Load a list of SUBCOMs                                     00550000
*   x        DC  CL8'SUBCOM'                                            00560000
*   x        DS  CL8                    Not used                        00570000
*   x        DC  AL4(list)              List of SUBCOMs to add          00580000
*   x        DC  AL4(3)                 Function subcode                00590000
*   x        DC  8X'ff'                                                 00600000
*                                                                       00610000
*   x     6) Drop all SUBCOMs in a given logical segment                00620000
*   x        DC  cl8'SUBCOM'                                            00630000
*   x        DC  cl8'segment name'      Segment name                    00640000
*   x        DC  al4(0)                 Reserved                        00650000
*   x        DC  al4(4)                 Function subcode                00660000
*   x        DC  8x'ff'                                                 00670000
*                                                                       00680000
***********************************************************             00690000
         EJECT ,                                                        00700000
***********************************************************             00710000
*                                                                       00720000
*        For NUCEXT                                                     00730000
*         R1 points to a plist:                                         00740000
*                                                                       00750000
*         1) Create a nucleus extension:                                00760000
*            DC  cl8'nucext'                                            00770000
*            DC  cl8'name'                                              00780000
*            DS  3X                     First 3 bytes of                00790000
*                                       entry psw.                      00800000
*            DS  X                      NUCEXT flag byte                00810000
*                                         System  = x'80'               00820000
*                                         Service = x'40'               00830000
*                                         Endcmd  = x'10'               00840000
*                                         Segment = x'08'               00850000
*                                         Immcmd  = x'04'               00860000
*                                         Amode   = x'03'               00870000
*                                                                       00880000
*            Note:   Amode bits 6 & 7 for default = x'00'               00890000
*                    Amode bits 6 & 7 for same    = x'00'               00900000
*                    Amode bits 6 & 7 for 24 bit  = x'01'               00910000
*                    Amode bits 6 & 7 for 31 bit  = x'02'               00920000
*                    Amode bits 6 & 7 for any     = x'03'               00930000
*                                                                       00940000
*                                                                       00950000
*            DS  X                      May be used for                 00960000
*                                       private purpose.                00970000
*            DC  AL3(entry point)       Extension address               00980000
*            DC  CL4'user information'  set into SCBWKWRD               00990000
*            DC  A(origin)              Addr of program                 01000000
*            DC  A(length)              Length(bytes)                   01010000
*                                                                       01020000
*         2) Query the existence of a nucleus extension                 01030000
*            DC  CL8'NUCEXT'                                            01040000
*            DC  CL8'name'                                              01050000
*            DC  4X'00'          will receive SCBLOCK address           01060000
*            DC  X'ffffffff'     identifies the query function          01070000
*                                                                       01080000
*         3) Query the chain anchor                                     01090000
*            DC  CL8'NUCEXT'                                            01100000
*            DS  CL8              (contents not relevent)               01110000
*            DS  AL4              will receive chain anchor             01120000
*                                 contents from nucxcblk.               01130000
*            DC  AL4(1)           indicates request for anchor          01140000
*                                                                       01150000
*         4) Cancel a nucleus extension                                 01160000
*            DC  CL8'NUCEXT'                                            01170000
*            DC  CL8'name'                                              01180000
*            DC  4X'00'                 reserved                        01190000
*            DC  AL4(0)         identifies the cancel function          01200000
*                                                                       01210000
*         5) Rename a nucleus extension                                 01220000
*            DC  CL8'NUCEXT'                                            01230000
*            DC  CL8'oldname'   old name of the nucleus ext             01240000
*            DC  4X'00'         reserved                                01250000
*            DC  AL4(2)         identifies the rename function          01260000
*            DC  CL8'newname'   new name for the extension              01270000
*            DC  8X'FF'         fence                                   01280000
*                                                                       01290000
*   x     6) load a list of nucexts                                     01300000
*   x        dc  cl8'nucext'                                            01310000
*   x        ds  cl8                    not used                        01320000
*   x        dc  al4(list)              list of nucexts to add          01330000
*   x        dc  al4(3)                 function subcode                01340000
*   x        dc  8X'FF'                 fence                           01350000
*                                                                       01360000
*   x     7) drop all nucexts in a given logical segment                01370000
*   x        dc  cl8'nucext'                                            01380000
*   x        dc  cl8'segment name'      segment name                    01390000
*   x        dc  al4(0)                 reserved                        01400000
*   x        dc  al4(4)                 function subcode                01410000
*   x        dc  8X'FF'                 fence                           01420000
*                                                                       01430000
* Exit conditions -                                                     01440000
*                                                                       01450000
*        R15 = 0 processing ok                                          01460000
*        R15 = 1 environment does not exist                             01470000
*        R15 = 25 no more storage available                             01480000
*        R15 = 28 no SCBLOCK with the specified name was found          01490000
*              to rename                                                01500000
*                                                                       01510000
*  Tables / Workareas -                                                 01520000
*                                                                       01530000
*        SCBLOCK                                                        01540000
*        NUCON                                                          01550000
*                                                                       01560000
*  Register usage -                                                     01570000
*                                                                       01580000
*        R0     = used by DMSFREE                                       01590000
*        RR(3)  = internal linkage register.                            01600000
*        BR(5)  = base register.                                        01610000
*        XR(8)  = SCBLOCK address                                       01620000
*        R9     = return register                                       01630000
*        R10    = Pointer to plist.                                     01640000
*        R11    = address of chain anchor.                              01650000
*        R14-15 linkage and work registers                              01660000
*                                                                       01670000
***********************************************************             01680000
         EJECT ,                                                        01690000
***********************************************************             01700000
*                                                                       01710000
* Operation -                                                           01720000
*                                                                       01730000
*   Routine - DMSSNXSB (SUBCOM)                                         01740000
*                                                                       01750000
*   1. If 'the psw address field is equal to 1' then:                   01760000
*         return the contents of the appropriate                        01770000
*         chain anchor in the first word of the psw                     01780000
*         field in caller's plist.                                      01790000
*      Else:                                                            01800000
*         the SCBLOCK chain is searched.                                01810000
*         If 'the environment name is not found' Then:                  01820000
*            If 'the address in the specified psw                       01830000
*               is 0 or x'ffffffff' ' then:                             01840000
*                  a return code of 1 is given back                     01850000
*                    to the caller.                                     01860000
*               Else:                                                   01870000
*                    goto step 2.                                       01880000
*                                                                       01890000
*         Else:                                                         01900000
*         If 'the address specified in the psw in the                   01910000
*            plist is 0' then:                                          01920000
*              the environment is removed from the                      01930000
*              chain and the SCBLOCK                                    01940000
*              is released by calling DMSFRET.                          01950000
*                                                                       01960000
*         Else:                                                         01970000
*         If 'the address is x'ffffffff' ' then:                        01980000
*              the address of the SCBLOCK                               01990000
*              is given back to the user in the                         02000000
*              first four bytes of the psw in the plist.                02010000
*         else:                                                         02020000
*              a duplicate SCBLOCK is built (step 2.)                   02030000
*         Return to caller.                                             02040000
*                                                                       02050000
*                                                                       02060000
*   2. A new SCBLOCK is built in free storage. I there                  02070000
*      is no more free storage, a return code of 25 is given            02080000
*      back to the caller.  The new SCBLOCK is placed on the            02090000
*      top of the chain.  The Name, PSW, and the User                   02100000
*      information specified in the plist are moved into the            02110000
*      SCBLOCK in storage. A return code of 0 is passed                 02120000
*        to the caller.                                                 02130000
         EJECT ,                                                        02140000
*   Routine - DMSSNXNU (NUCEXT)                                         02150000
*                                                                       02160000
*  Processing is similar to that of DMSSNXSB, but a                     02170000
*  separate chain of SCBLOCKs is defined at NUCXCBLK. This              02180000
*  chain is not discarded between terminal input commands.              02190000
*  it is the responsibility of the user to explicitly                   02200000
*  delete Nucleus Extensions when they are no longer needed.            02210000
*                                                                       02220000
*  Implementation of the NUCEXT command affects the command             02230000
*  resolution strategy of DMSITS when an SVC 202 is                     02240000
*  processed.  Nucleus Extensions are normally sought before a          02250000
*  module in the transient area or a function resident in               02260000
*  the CMS Nucleus.                                                     02270000
*  This gives the user the ability to intercept, filter,                02280000
*  augment, etc., the "real" Nucleus functions.                         02290000
*                                                                       02300000
*  The search for Nucleus Extensions may be suppressed by               02310000
*  using a high-order byte of X'03' or X'04' in register 1              02320000
*  when executing svc 202.  When the normal Nucleus routine or          02330000
*  module is entered, this high-order byte will have been               02340000
*  changed to X'01' or X'00', respectively.                             02350000
*                                                                       02360000
*  Parameter lists for calls to NUCEXT are analogous to                 02370000
*  those for calls to SUBCOM.  There are some                           02380000
*  additional flag bits which are defined in the                        02390000
*  SCBPSW field of the SCBLOCK Dsect.  these bits                       02400000
*  are supplied by the user in the corresponding                        02410000
*  positions of the PSW parameter in the NUCEXT plist.                  02420000
*                                                                       02430000
*  There are also two additional words in the call to                   02440000
*  create a nucleus extension, following the user word. These           02450000
*  contain the address and length in bytes of the                       02460000
*  program implementing the extension.  These 2 fields are              02470000
*  commonly used by other programs concerned with establishing          02480000
*  or deleting nucleus extensions. In one case they are used            02490000
*  by dmsabe (see below).                                               02500000
*                                                                       02510000
*  Nucleus extensions may have or may not have                          02520000
*  the "system" and/or the "service" attributes.                        02530000
*  These attributes determine the handling of a                         02540000
*  nucleus extension during abend processing.                           02550000
*                                                                       02560000
*     If a nucleus extension has the "system"                           02570000
*     attribute, it remains active after an                             02580000
*     abend.  It is the user's responsibility                           02590000
*     to see that such a nucleus extension is                           02600000
*     loaded into nucleus storage, not user                             02610000
*     storage which is released by DMSFRE during abend.                 02620000
*                                                                       02630000
*     If a nucleus extension has the "service"                          02640000
*     attribute, it is called during abend                              02650000
*     processing with the parameter list:                               02660000
*                                                                       02670000
*        DC    CL8'PURGE'                                               02680000
*        DC    8X'ff'                                                   02690000
*                                                                       02700000
*     If a nucleus extension has the "service"                          02710000
*     attribute, it is called at NUCXDROP                               02720000
*     time with the parameter list:                                     02730000
*                                                                       02740000
*        DC    CL8'RESET'                                               02750000
*        DC    8X'ff'                                                   02760000
*                                                                       02770000
* Other attributes that may be associated with a nucleus                02780000
* extension are -                                                       02790000
*                                                                       02800000
*     If a nucleus extension has the "endcmd"                           02810000
*     attribute, it is called during cms                                02820000
*     end of command with the parameter list:                           02830000
*                                                                       02840000
*        DC    CL8'ENDCMD'        endcmd indicator                      02850000
*        DS    F                  cms/cp command's return code          02860000
*        DC    8X'ff'                                                   02870000
*                                                                       02880000
*                                                                       02890000
*  A nucleus extension may have "system", "service", and                02900000
*  "endcmd" attributes in any combination.                              02910000
*                                                                       02920000
*                                                                       02930000
*  Accounting during abend recovery for nucleus storage                 02940000
*  used by nucleus extensions:                                          02950000
*                                                                       02960000
*     When a nucleus extension has the "system" attribute,              02970000
*     it should be in nucleus storage and the length word               02980000
*     is used by abend recovery to account for the amount               02990000
*     of storage used by that program.                                  03000000
*                                                                       03010000
*     If a nucleus extension does not have the "system"                 03020000
*     attribute, but is in nucleus storage anyway, that                 03030000
*     storage will be released during abend recovery.                   03040000
*                                                                       03050000
*     When a nucleus extension obtains nucleus-type free                03060000
*     storage other than what is accounted for by the origin            03070000
*     and length fields in the SCBLOCK, it should either:               03080000
*                                                                       03090000
*         Use the "service" flag so that it is called                   03100000
*         with the purge argument during abend, at which                03110000
*         time it returns any nucleus-type storage                      03120000
*         it obtained (but not that described in its                    03130000
*         SCBLOCK).                                                     03140000
*                                                                       03150000
*         If it has the "system" attribute, any extra nucleus           03160000
*         storage which is to be kept through an abend should           03170000
*         be accounted for by adding the length of such                 03180000
*         storage into the NUCXFRES field in nucon.  It is              03190000
*         good practice to update this field as soon as the             03200000
*         storage is obtained; this is mandatory if the                 03210000
*         nucleus extension does not have the "service"                 03220000
*         attribute.                                                    03230000
*                                                                       03240000
*     Processing for rename subfunction:                                03250000
*                                                                       03260000
*     Initialize the return code to 28 (i.e. no SCBLOCK was             03270000
*     found with the specified name).                                   03280000
*                                                                       03290000
*     Walk the SCBLOCK chain, looking for an SCBLOCK with a             03300000
*     name that matches the first name specified by the                 03310000
*     caller. when the first one is found, change its name to           03320000
*     the second name passed by the caller, and set the return          03330000
*     code to 0.                                                        03340000
*                                                                       03350000
*     Return to caller.                                                 03360000
*                                                                       03370000
*                                                                       03380000
**************************************************************          03390000
         EJECT                                                          03400000
         USING NUCON,0                                                  03410000
         USING DMSSNX,R12                                               03420000
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **          03430000
*                                                            *          03440000
*             SUBCOM    Handle SUBCOM command.               *          03450000
*             NUCEXT    Handle NUCEXT command.               *          03460000
*                                                            *          03470000
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **          03480000
DMSSNXNU DS   0H                  NUCEXT entry.                         03490000
         ENTRY DMSSNXNU                                                 03500000
         STM   R14,R12,12(R13)    Save entry regs                       03510000
         LR    R12,R15                                                  03520000
         LA    R15,DMSSNXNU-DMSSNX                                      03530000
         SLR   R12,R15            Set base                              03540000
         LA    R11,NUCXCBLK       Set for NUCEXT                        03550000
         B     SUBCOMC            Join below                            03560000
*                                                                       03570000
DMSSNXSB DS    0H                 SUBCOM entry.                         03580000
         ENTRY DMSSNXSB                                                 03590000
         STM   R14,R12,12(R13)    Save entry regs                       03600000
         LR    R12,R15                                                  03610000
         LA    R15,DMSSNXSB-DMSSNX                                      03620000
         SLR   R12,R15            Set base                              03630000
         LA    R11,NUCSCBLK       Set for SUBCOM                        03640000
*                                                                       03650000
*  Common code for NUCEXT and SUBCOM command processing.                03660000
*  R11 contains address of appropriate chain anchor.                    03670000
*                                                                       03680000
SUBCOMC  DS    0H                                                       03690000
         LR    R10,R1             Plist address                         03700000
         USING SUBPLIST,R10                                             03710000
*                                                                       03720000
         LR    R15,R11            Chain anchor to R15                   03730000
*                                 for SEARCHSB routine.                 03740000
         CLC   FENCE,SUBPNAME     Any arguments?                        03750000
         BE    NOARGS             No, that's strange                    03760000
         CLC   SUBFUNC,=F'-1'     Check if query request.               03770000
         BE    SCQUERY            Yes.                                  03780000
         CLC   SUBFUNC,=F'0'      Clear entry request?                  03790000
         BE    SCCLR              Yes.                                  03800000
         CLC   SUBFUNC,=F'1'      Return anchor request?                03810000
         BE    SCANCHOR           Yes                                   03820000
         CLC   SUBFUNC,=F'2'      Rename request?                       03830000
         BE    SCRENAME           Yes                                   03840000
         B     SCSET              Go create an SCBLOCK                  03850000
NOARGS   DS    0H                                                       03860000
         LA    R15,1              RC = 1.                               03870000
         B     DMSSNXIT           Done.                                 03880000
*                                                                       03890000
**************************************************************          03900000
* RENAME an SCBLOCK.                                         *          03910000
**************************************************************          03920000
SCRENAME DS    0H                                                       03930000
         LM    R0,R1,SUBPNAME     Get our old name                      03940000
         BAL   R3,SEARCHSB        Go find this name                     03950000
         BNZ   DMSSNXNF           Error if not found                    03960000
         USING SCBLOCK,R8                                               03970000
         MVC   SCBNAME(8),SUBNAME2     Change the name                  03980000
         DROP  R8                                                       03990000
         SLR   R15,R15                                                  04000000
SCREN99  DS    0H                                                       04010000
         B     DMSSNXIT           Done.                                 04020000
*                                                                       04030000
**************************************************************          04040000
* Return chain anchor pointer.                               *          04050000
**************************************************************          04060000
SCANCHOR DS    0H                 Save plist address.                   04070000
         MVC   SUBRETN,0(R11)     Copy contents of                      04080000
*                                   chain anchor into plist             04090000
*                                   to pass to caller.                  04100000
         SLR   R15,R15                                                  04110000
         B     DMSSNXIT           Done.                                 04120000
*                                                                       04130000
***************************************************************         04140000
*  Clear entry request                                                  04150000
***************************************************************         04160000
SCCLR    DS    0H                                                       04170000
         LM    R0,R1,SUBPNAME     Get our old name                      04180000
         BAL   R3,SEARCHSB        Go find this name                     04190000
         BNZ   DMSSNXNF           Error if not found                    04200000
         USING SCBLOCK,R8                                               04210000
         BAL   R3,SUBDROP         Delete the SCBLOCK,                   04220000
         SLR   R15,R15            Set successful return code,           04230000
         B     DMSSNXIT           Done.                                 04240000
*                                                                       04250000
***************************************************************         04260000
*  QUERY request                                                        04270000
***************************************************************         04280000
SCQUERY  DS    0H                                                       04290000
         LM    R0,R1,SUBPNAME     Get our old name                      04300000
         BAL   R3,SEARCHSB        Go find this name                     04310000
         BNZ   DMSSNXNF           Error if not found                    04320000
         LR    R1,R8                                                    04330000
         ST    R1,SUBRETN         Return address of the SCBLOCK.        04340000
         SLR   R15,R15                                                  04350000
         B     DMSSNXIT           Done.                                 04360000
*                                                                       04370000
* Subroutine to delete an SCBLOCK from the chain.                       04380000
*                                                                       04390000
SUBDROP  DS    0H                                                       04400000
         TM    SCBSFLAG,SCBSFEND  Is this an 'endcmd' nucleus           04410000
*                                   extention?                          04420000
         BZ    NOTEND             No skip this                          04430000
         L     R15,NUCXEND        Get count of currently active         04440000
*                                 'endcmd' nucleus extentions           04450000
         BCTR  R15,0              Decrement this by one                 04460000
         ST    R15,NUCXEND        Store new count                       04470000
NOTEND   DS    0H                                                       04480000
         MVC   SCBFWPTR-SCBLOCK(,R11),SCBFWPTR-SCBLOCK(R8)              04490000
*                                 Unchain SCBLOCK.                      04500000
*  (Remember, the searchsb routine moved the SCBLOCK to                 04510000
*  the head of the chain, whose anchor address is in R11.)              04520000
         MVC   SCBFWPTR-SCBLOCK(,R8),NUCXCBEE  Put on free list         04530000
         ST    R8,NUCXCBEE        Update free list pointer.             04540000
         BR    R3                                                       04550000
*                                                                       04560000
         DROP  R8                                                       04570000
*                                                                       04580000
***************************************************************         04590000
*  Create a new subcommand block                                        04600000
***************************************************************         04610000
SCSET    DS    0H                 New SCBLOCK from free list.           04620000
         ICM   R1,B'1111',NUCXCBEE  first block on list.                04630000
         BNZ   GOTNEW             Br if one found on free list.         04640000
         BAL   R3,NEEDMORE        Allocate some more SCBLOCKs.          04650000
         LTR   R15,R15            Return if no space.                   04660000
         BNZ   DMSSNXIT           Done. Return R15 = 25                 04670000
*                                                                       04680000
GOTNEW   DS    0H                                                       04690000
         USING SCBLOCK,R1                                               04700000
         MVC   NUCXCBEE,SCBFWPTR  Remove block from free list.          04710000
         XC    SCBSFLG2,SCBSFLG2  Clear flag byte                       04720000
         MVC   SCBNAME,SUBPNAME   Enter subcommand name                 04730000
         MVC   SCBPSW(2),SUBPSW   System mask and Protect Key           04740000
         MVC   SCBSFLAG,SUBSYSF   Flag bits                             04750000
         MVC   SCBENTR,SUBADDR    Entry point                           04760000
         MVC   SCBWKWRD,SUBWKRD     and user information                04770000
         MVC   SCBXORG,SUBXORG    Copy origin and length                04780000
         MVC   SCBXLEN,SUBXLEN        values.                           04790000
*                                                                       04800000
         MVC   SCBFWPTR,SCBFWPTR-SCBLOCK(R11)    PUT NEW BLOCK          04810000
         ST    R1,0(,R11)    AT HEAD OF CHAIN.                          04820000
*                                                                       04830000
         CLC   SUBPLIST,=CL8'SUBCOM' Check for SUBCOM request.          04840000
         BNE   GOTNUCE           NO NEED TO CHECK FLAGS.                04850000
         NI    SCBSFLAG,SCBSFSYS RESET ANY INVALID FLAGS.               04860000
*                                                                       04870000
*        User cannot set look-aside, abend, or hide bits.               04880000
GOTNUCE  DS    0H                                                       04890000
*$$$$$$$ NI    SCBSFLAG,X'FF'-SCBSFX-SCBSFABN-SCBSHIDE                  04900000
         TM    SCBSFLAG,SCBSFEND  IS THIS A 'ENDCMD' NUCLEUS            04910000
*                                 EXTENTION ??                          04920000
         BZ    NOENDCMD           NO, SKIP THIS                         04930000
         L     R15,NUCXEND        GET COUNT OF CURRENTLY ACTIVE         04940000
*                                 'ENDCMD' NUCLEUS EXTENTIONS           04950000
         LA    R15,1(,R15)        INCREMENT THIS BY ONE                 04960000
         ST    R15,NUCXEND        STORE NEW COUNT                       04970000
NOENDCMD DS    0H                                                       04980000
         SLR   R15,R15            Successful Return Code.               04990000
         B     DMSSNXIT           Done. Return R15 = 0                  05000000
         DROP  R1                 SCBLOCK.                              05010000
*                                                                       05020000
***************************************************************         05030000
*  Return to our caller. Requested SCBLOCK was not found.               05040000
***************************************************************         05050000
DMSSNXNF DS    0H                                                       05060000
         LA    R15,NOTFOUND       Set our "not found" rc                05070000
*                                                                       05080000
***************************************************************         05090000
*  Return to our caller. RC is in R15                                   05100000
***************************************************************         05110000
DMSSNXIT DS    0H                                                       05120000
         L     R14,12(,R13)       Return address                        05130000
         LM    R0,R12,20(R13)     Pass back R15                         05140000
         BR    R14                Return to DMSITS                      05150000
         EJECT                                                          05160000
***************************************************************         05170000
*  Subroutine to allocate a new bunch of SCBLOCKs.                      05180000
***************************************************************         05190000
*                                                                       05200000
*  Input:  R3 = return address.                                         05210000
*                                                                       05220000
*  Output:  R15 = 0, more SCBLOCKs are on the free list.                05230000
*           R1  = address of new SCBLOCK (the same value                05240000
*                 which is stored in nucxcbee).                         05250000
*                                                                       05260000
*           R15 = 25, no space available.                               05270000
*                                                                       05280000
*  THE FOLLOWING REGISTERS ARE ALSO MODIFIED BY THIS ROUTINE:           05290000
*  R0, R8, R14                                                          05300000
*                                                                       05310000
NEEDMORE DS    0H                                                       05320000
*                                                                       05330000
*  Define the number of additional SCBLOCKs to be allocated in          05340000
*  a contiguous storage area.                                           05350000
*  In this case, set it to be one page of SCBLOCKs.                     05360000
*                                                                       05370000
         L     R0,=A(2*4096)      Get 8K bytes in dwords                05380000
         LR    R5,R0              Hold byte count                       05390000
         SRL   R0,3               Size in doublewords                   05400000
         DMSFREE DWORDS=(0),MSG=NO,TYPCALL=BALR,                       *05410000
               TYPE=NUCLEUS,ERR=NOSPACE                                 05420000
         LA    R4,0(,R1)          1st byte allocated                    05430000
         LA    R5,0(R4,R5)        Point past last byte LL=BRANCH        05440000
*                                                                       05450000
*  R4->   +--------------------------------------------------+          05460000
*                                                                       05470000
*           Bytes before page boundary. If we happen to have            05480000
*           allocated the area on a page boundary, the size             05490000
*           of this area will be zero.                                  05500000
*                                                                       05510000
*  (A)->  +-------page boundary------------------------------+          05520000
*                                                                       05530000
*                                                                       05540000
*         .                                                  .          05550000
*         .                                                  .          05560000
*         .                                                  .          05570000
*                                                                       05580000
*                                                                       05590000
*  (B)    +-------page boundary------------------------------+          05600000
*                                                                       05610000
*            Bytes past page boundary                                   05620000
*                                                                       05630000
*         +--------------------------------------------------+          05640000
*  R5->     Points past last allocated byte                             05650000
*                                                                       05660000
         LA    R0,4095(,R4)       Get address of next                   05670000
         N     R0,=A(X'FFFFF000')       page boundary at (A)            05680000
*                                                                       05690000
         SR    R0,R4              Number bytes before bndry             05700000
         BZ    GETPAGE2           Bif no bytes before bndry             05710000
         LR    R1,R4              R0=Bytes to ret. R1=addr              05720000
         AR    R4,R0              R2=Ptr to 1st page bndry              05730000
         SRL   R0,3               Size in doublewords                   05740000
*                                 Fret bytes before page                05750000
         DMSFRET DWORDS=(0),LOC=(1),TYPCALL=BALR                        05760000
GETPAGE2 DS    0H                                                       05770000
         LR    R1,R5              Get address                           05780000
         N     R1,=A(X'FFFFF000')    of ending page bndry (B)           05790000
         LR    R0,R5              Past the last byte                    05800000
         LR    R5,R1              Remember address past end             05810000
*                                    of the last page                   05820000
         SR    R0,R1              Length to fret at end                 05830000
         BZ    GETPAGE3           Bif no bytes to fret                  05840000
*                                 (Can't happen??)                      05850000
*                                 R0=Bytes to ret. R1=addr              05860000
         SRL   R0,3               Size in doublewords                   05870000
*                                 Fret dwords after page bndry          05880000
         DMSFRET DWORDS=(0),LOC=(1),TYPCALL=BALR                        05890000
GETPAGE3 DS    0H                                                       05900000
         LR    R0,R5              Address just past end                 05910000
*                                    of the last page                   05920000
         LR    R1,R4              Address of start of area              05930000
         SR    R0,R1              Length of allocated area              05940000
*                                                                       05950000
         ST    R1,NUCXCBEE        Save pointer to page                  05960000
         USING SCBLOCK,R1                                               05970000
         L     R0,=A(4096/SCBLOCKB-1) Number of SCBLOCKs - 1            05980000
NEEDMLP  DS    0H                                                       05990000
         XC    SCBLOCK(SCBLOCKB),SCBLOCK  clear the new block.          06000000
         LA    R15,SCBLOCKB(,R1)  Locate the next block.                06010000
         ST    R15,SCBFWPTR       Store link.                           06020000
         LR    R1,R15                                                   06030000
         BCT   R0,NEEDMLP         Loop for all but last block.          06040000
         XC    SCBLOCK(SCBLOCKB),SCBLOCK  clear the last block.         06050000
         SLR   R15,R15            Set successful return code.           06060000
         L     R1,NUCXCBEE        Return the address of first           06070000
*                                 Scblock in the free list.             06080000
         BR    R3                 Return to caller.                     06090000
         DROP  R1                 SCBLOCK.                              06100000
*                                                                       06110000
NOSPACE  DS    0H                                                       06120000
         LA    R15,25             RC=25                                 06130000
         BR    R3                 Return to caller                      06140000
         EJECT                                                          06150000
***************************************************************         06160000
*  Search a subcommand or nucleus extension chain.                      06170000
***************************************************************         06180000
*                                                                       06190000
*  Inputs:  R0, R1  = Command name.                                     06200000
*           R15     = Address of chain header --                        06210000
*                     not changed by this subroutine.                   06220000
*           R3      = Return address.                                   06230000
*                                                                       06240000
*  Outputs: CC      = 0 if found                                        06250000
*           CC     <> 0 if not found                                    06260000
*           R8 (R8) = address of chain element                          06270000
*                                                                       06280000
*  Uses R14, R8  as work registers.                                     06290000
*                                                                       06300000
*  Whenever a match is found, the block found is promoted               06310000
*  to the head of the chain.                                            06320000
*                                                                       06330000
         USING SCBLOCK,R14                                              06340000
SEARCHSB DS    0H                                                       06350000
         LR    R14,R15            Preserve chain anchor                 06360000
*                                 In r15 for caller.                    06370000
         B     SEARCHL2                                                 06380000
SEARCHLP DS    0H                                                       06390000
         LR    R14,R8             Remember this element.                06400000
SEARCHL2 DS    0H                                                       06410000
         L     R8,SCBFWPTR        Get address of next element.          06420000
         LTR   R8,R8              Branch if end of chain.               06430000
         BZ    SEARCHNF                                                 06440000
         DROP  R14                                                      06450000
         USING SCBLOCK,R8                                               06460000
         CL    R0,SCBNAME         Branch if not desired                 06470000
         BNE   SEARCHLP           Element.                              06480000
         CL    R1,SCBNAME+4       Also check second half of             06490000
         BNE   SEARCHLP           Nope, keep searching                  06500000
SEARCHGD DS    0H                                                       06510000
         CR    R14,R15            Branch if first on chain.             06520000
         BER   R3                 Return to caller                      06530000
         MVC   SCBFWPTR-SCBLOCK(4,R14),SCBFWPTR  Remove found           06540000
*                                   element from chain.                 06550000
         MVC   SCBFWPTR,0(R15)    Link to prior first element.          06560000
         ST    R8,0(R15)          Update chain anchor.                  06570000
         CR    R15,R15            Set cc = 0.                           06580000
         BR    R3                 Return to caller                      06590000
         DROP  R8                                                       06600000
SEARCHNF DS    0H                                                       06610000
         LTR   R3,R3              Set cc <> 0.                          06620000
         BR    R3                 Return                                06630000
         EJECT                                                          06640000
         LTORG ,                                                        06650000
*                                                                       06660000
         DS    0D                                                       06670000
FENCE    DC    XL8'FFFFFFFFFFFFFFFF'                                    06680000
         LTORG                                                          06690000
         EJECT                                                          06700000
*                                                                       06710000
NOTFOUND EQU   1              Used by RENAME NUCEXT function            06720000
*                                                                       06730000
* Subcommand Plist for NUCEXT and SUBCOM calls                          06740000
*                                                                       06750000
SUBPLIST DSECT                SUBCOM plist                              06760000
         DC    CL8'SUBCOM'    CL8'SUBCOM' or CL8'NUCEXT'                06770000
SUBPNAME DS    CL8            Name                                      06780000
SUBRETN  DS    A              Pass back pointer for QUERY/ANCHOR        06790000
SUBFUNC  DS    F              Function call type                        06800000
         ORG   SUBRETN                                                  06810000
SUBPSW   DS    0D             Starting PSW                              06820000
SUBMASK  DS    X              System Mask                               06830000
SUBKEY   DS    X              Storage Key                               06840000
SUBSYSF  DS    X              Flags                                     06850000
         DS    X                                                        06860000
SUBADDR  DS    A              Entry point                               06870000
SUBWKRD  DS    A              Work area (If any)                        06880000
SUBXORG  DS    A              Origin (for NUCEXT)                       06890000
SUBXLEN  DS    F              Length (for NUCEXT)                       06900000
         ORG   SUBXORG                                                  06910000
SUBNAME2 DS    CL8            Second SCBLOCK name for RENAME            06920000
         SCBLOCK ,                                                      06930000
         EJECT ,                                                        06940000
         EPLIST ,                                                       06950000
         EJECT                                                          06960000
         NUCON                                                          06970000
         EQUATES                                                        06980000
         REGEQU ,                                                       06990000
         END                                                            07000000
